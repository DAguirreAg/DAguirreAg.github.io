[{"content":"With the homelab hardware set up, it is time to start preparing the machines so they can work together. As I intend to use my homelab as a safe and easy to use \u0026ldquo;IT playground\u0026rdquo;, I have decided that the following elements would need to be setup:\nStatic IP address on each machine. This facilitates troubleshooting as well as easing the communication between the machines. Remote control software and SSH. This facilitates troubleshooting my \u0026ldquo;remote\u0026rdquo; machines without having to hook a keyboard+mouse+monitor to them. An Ads and Internet tracker blocking service. This should add extra network protection. Containerization software. This should facilitate the deployment of code as well as reduce issues with package dependencies. 1. Setting up static IP address (in Raspbian) Setting up a static address in a Raspbian machine is quite straightforward.\nGet Raspberry Pi\u0026rsquo;s IP address by typing: hostname -I. Get my router\u0026rsquo;s IP address by typing: ip r Get Raspberry Pi\u0026rsquo;s DNS IP address by typing: nano /etc/resolv.conf Edit the following lines in the dhcpcd.conf file by typing: nano /etc/dhcpcd.conf: interface eth0 static ip_address=192.168.0.132/24 static routers=192.168.0.1 static domain_name_servers=192.168.0.1 (Note that your IP address values may be different) Save changes by pressing ctrl + x. Restart the machine. (Optional) Add the static IP address tags to the machines. Static IP address tags. 2. Setting SSH and Remote control software Follow next steps:\nClick main menu. Click Preferences. Click Raspberry Pi Configuration. Select the tab Interfaces. Activate SSH and VNC. (Note that in order to connect via VNC, I will have to install a VNC remote control software. In my case, I use VNC viewer due to its simplicity and availability in my Ubuntu OS).\nEnabling SSH and VNC. 3. Installing Ads and Internet tracker blocking service (Pi-Hole) Follow next steps:\nVisit https://docs.pi-hole.net/main/basic-install/ and follow the instructions. Visit https://firebog.net/ and note down the lists (urls) wanted to be added into Pi-Hole. Visit Pi-Hole\u0026rsquo;s address (http://192.168.0.132/admin in my case). Add noted down urls in the Adlist section. Open a terminal window to add recently added lists to Pi-Hole by typing: pihole -g. Go into your specific router\u0026rsquo;s admin page and make sure to setup the Pi-Hole\u0026rsquo;s IP address as your primary DNS. 4. Installing Containerization software (Docker) Follow next steps:\nUpdate package manager index: sudo apt update Upgrade packages: sudo apt upgrade Download Docker \u0026ldquo;installer\u0026rdquo; script: curl -fsSL https://get.docker.com -o get-docker.sh Execute Docker \u0026ldquo;installer\u0026rdquo; script: sudo ./get-docker.sh (Optional) Add user to Docker usergorub to avoid having to type sudo everytime a command needs to be executed: sudo usermod -aG docker [username] ","permalink":"https://daguirreag.github.io/posts/setting-up-my-own-home-lab-software/","summary":"With the homelab hardware set up, it is time to start preparing the machines so they can work together. As I intend to use my homelab as a safe and easy to use \u0026ldquo;IT playground\u0026rdquo;, I have decided that the following elements would need to be setup:\nStatic IP address on each machine. This facilitates troubleshooting as well as easing the communication between the machines. Remote control software and SSH. This facilitates troubleshooting my \u0026ldquo;remote\u0026rdquo; machines without having to hook a keyboard+mouse+monitor to them.","title":"Setting up my own Home lab: Software"},{"content":"As a data engineer, it is quite obvious that I like tinkering with technology, specially with software related stuff. Because of this, some time ago I decided to setup my own simple homelab where I could experiment and run scripts around without worrying about setting up cloud services.\nAs such, I have decided to share how I set up my homelab, so others can use it as an inspiration or just have a look at it.\n1. Requirements No project can start without the prior requirement gathering. Next I am displaying the main points I want to get in my homelab:\nHardware-wise Low power consumption (as I plan to have projects running 24/7). Low noise (as I will place it near my living room). Low cost setup. Software-wise Monitor network activity. Run projects 24/7. 2. Hardware Based on the requirements and a little bit of research (and availability of the devices), I settled down for the following:\nRaspberry Pi 4 Model B (8Gb ram) Raspberry Pi 3 Model B + TP Link TL-WR940N (Router) Main Desktop PC Seagate Expansion Portable Hard Drive SRD0NF1 (external HDD) Homelab hardware. 3. Network architecture/topology The devices communicate with each other via ethernet connection, all of them connected through a centralized router. Note that even though the router is a single Point-Of-Failure, it is very unlikely to happen, and none of the services I am running are critical enough to consider for a redundant solution. Find below the topology of my homelab:\nOverview of Network topology. Future steps Ideally, I would like to have another Raspberry Pi 4 fully dedicated to experimentation. This should allow me to identify issues that may arise when deploying services in my 24/7 running Raspberry Pi 4, without risking breaking it.\n","permalink":"https://daguirreag.github.io/posts/setting-up-my-own-home-lab-hardware-networking/","summary":"As a data engineer, it is quite obvious that I like tinkering with technology, specially with software related stuff. Because of this, some time ago I decided to setup my own simple homelab where I could experiment and run scripts around without worrying about setting up cloud services.\nAs such, I have decided to share how I set up my homelab, so others can use it as an inspiration or just have a look at it.","title":"Setting up my own Home lab: Hardware/Networking"},{"content":"","permalink":"https://daguirreag.github.io/about/","summary":"","title":"About"},{"content":"Data engineering üíΩ Financial news collectors - Financial news collector and aggregator service. IP-to-Geolocation - Proof of concept of a IP-to-Geolocation web application. It returns the geographic location of a given IP address. Software engineering üßë‚Äçüíª STL to gif - A Python script to create a gif file from a STL file. URL-shortener - Proof of concept of a URL shortener application. Feedback-functionality - A simple implementation to add the functionality to collect user provided feedback via website forms to your websites. Hardware üîß CNC pen-plotter - A repository of the code, schematics and hardware needed to build a simple two linear axes plotter controlled with an Arduino and a CNC shield. 3D-printable bearing generator - A python script to generate 3D printable bearings according to your dimensional constrains. GCode-to-ABB - A python implementation for transforming a GCode file to a ABB robot specific movements. ","permalink":"https://daguirreag.github.io/projects/","summary":"Data engineering üíΩ Financial news collectors - Financial news collector and aggregator service. IP-to-Geolocation - Proof of concept of a IP-to-Geolocation web application. It returns the geographic location of a given IP address. Software engineering üßë‚Äçüíª STL to gif - A Python script to create a gif file from a STL file. URL-shortener - Proof of concept of a URL shortener application. Feedback-functionality - A simple implementation to add the functionality to collect user provided feedback via website forms to your websites.","title":"Projects"}]